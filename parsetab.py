
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD ASSIGN BEGIN COMMA DIV DO DT_FLOAT DT_INT ELSE END FLOAT GEQ GT ID IF INTEGER LBRACK LEQ LITERAL_STR LPAR LT MUL RBRACK READ REPEAT RPAR SEMICOLON SUB THEN UNTIL WHILE WRITEprogram : stmt_list SEMICOLONstmt_list : stmt_list SEMICOLON stmt\n                 | stmtstmt : assignment\n            | read\n            | write\n            | declaration\n            | construct_while\n            | construct_repeat\n            | construct_if\n            | blockblock : BEGIN stmt_list ENDconstruct_while : WHILE LPAR l_expr RPAR DO blockconstruct_repeat : REPEAT stmt_list UNTIL LPAR l_expr RPARconstruct_if : IF l_expr stmt construct_elseconstruct_else : \n                      | ELSE stmtl_expr : a_expr oprel a_exproprel : LT\n             | GT\n             | LEQ\n             | GEQassignment : ID arr_idx ASSIGN a_expr\n                  | ID ASSIGN a_exprdeclaration : datatype ID arr_sizearr_size : LBRACK a_expr RBRACK\n                | datatype : DT_INT\n                | DT_FLOATa_expr : a_expr a_op a_expr\n              | varref\n              | INTEGER\n              | FLOAT\n              | LPAR a_expr RPAR\n              | SUB a_expr\n              | LITERAL_STRa_op : ADD\n            | SUB\n            | MUL\n            | DIVvarref : ID arr_idxarr_idx : LBRACK a_expr RBRACKread : READ varlistwrite : WRITE expr_listvarlist : varlist COMMA varref\n               | varrefexpr_list : expr_list COMMA a_expr\n                 | a_expr'
    
_lr_action_items = {'ID':([0,13,14,15,17,18,19,20,21,22,24,25,31,32,33,34,35,36,38,40,44,47,48,49,50,51,52,53,54,56,58,61,63,64,65,66,67,70,73,74,77,79,80,],[12,28,28,37,12,28,12,-28,-29,12,28,28,-31,-32,-33,28,28,-36,28,12,28,28,-41,28,28,-37,-38,-39,-40,-35,28,12,28,-19,-20,-21,-22,-42,-30,-34,28,12,-18,]),'READ':([0,17,19,22,31,32,33,36,40,48,56,61,70,73,74,79,80,],[13,13,13,13,-31,-32,-33,-36,13,-41,-35,13,-42,-30,-34,13,-18,]),'WRITE':([0,17,19,22,31,32,33,36,40,48,56,61,70,73,74,79,80,],[14,14,14,14,-31,-32,-33,-36,14,-41,-35,14,-42,-30,-34,14,-18,]),'WHILE':([0,17,19,22,31,32,33,36,40,48,56,61,70,73,74,79,80,],[16,16,16,16,-31,-32,-33,-36,16,-41,-35,16,-42,-30,-34,16,-18,]),'REPEAT':([0,17,19,22,31,32,33,36,40,48,56,61,70,73,74,79,80,],[17,17,17,17,-31,-32,-33,-36,17,-41,-35,17,-42,-30,-34,17,-18,]),'IF':([0,17,19,22,31,32,33,36,40,48,56,61,70,73,74,79,80,],[18,18,18,18,-31,-32,-33,-36,18,-41,-35,18,-42,-30,-34,18,-18,]),'BEGIN':([0,17,19,22,31,32,33,36,40,48,56,61,70,73,74,79,80,82,],[19,19,19,19,-31,-32,-33,-36,19,-41,-35,19,-42,-30,-34,19,-18,19,]),'DT_INT':([0,17,19,22,31,32,33,36,40,48,56,61,70,73,74,79,80,],[20,20,20,20,-31,-32,-33,-36,20,-41,-35,20,-42,-30,-34,20,-18,]),'DT_FLOAT':([0,17,19,22,31,32,33,36,40,48,56,61,70,73,74,79,80,],[21,21,21,21,-31,-32,-33,-36,21,-41,-35,21,-42,-30,-34,21,-18,]),'$end':([1,22,],[0,-1,]),'SEMICOLON':([2,3,4,5,6,7,8,9,10,11,26,27,29,30,31,32,33,36,37,39,42,43,45,48,56,57,62,68,69,70,71,72,73,74,78,81,84,85,86,],[22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-43,-46,-44,-48,-31,-32,-33,-36,-27,61,61,-2,-24,-41,-35,-25,-16,-12,-23,-42,-45,-47,-30,-34,-15,-26,-17,-13,-14,]),'UNTIL':([3,4,5,6,7,8,9,10,11,26,27,29,30,31,32,33,36,37,39,43,45,48,56,57,62,68,69,70,71,72,73,74,78,81,84,85,86,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-43,-46,-44,-48,-31,-32,-33,-36,-27,60,-2,-24,-41,-35,-25,-16,-12,-23,-42,-45,-47,-30,-34,-15,-26,-17,-13,-14,]),'END':([3,4,5,6,7,8,9,10,11,26,27,29,30,31,32,33,36,37,42,43,45,48,56,57,62,68,69,70,71,72,73,74,78,81,84,85,86,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-43,-46,-44,-48,-31,-32,-33,-36,-27,68,-2,-24,-41,-35,-25,-16,-12,-23,-42,-45,-47,-30,-34,-15,-26,-17,-13,-14,]),'ELSE':([4,5,6,7,8,9,10,11,26,27,29,30,31,32,33,36,37,45,48,56,57,62,68,69,70,71,72,73,74,78,81,84,85,86,],[-4,-5,-6,-7,-8,-9,-10,-11,-43,-46,-44,-48,-31,-32,-33,-36,-27,-24,-41,-35,-25,79,-12,-23,-42,-45,-47,-30,-34,-15,-26,-17,-13,-14,]),'ASSIGN':([12,23,70,],[24,44,-42,]),'LBRACK':([12,28,37,],[25,25,58,]),'INTEGER':([14,18,24,25,34,35,38,44,49,50,51,52,53,54,58,63,64,65,66,67,77,],[32,32,32,32,32,32,32,32,32,32,-37,-38,-39,-40,32,32,-19,-20,-21,-22,32,]),'FLOAT':([14,18,24,25,34,35,38,44,49,50,51,52,53,54,58,63,64,65,66,67,77,],[33,33,33,33,33,33,33,33,33,33,-37,-38,-39,-40,33,33,-19,-20,-21,-22,33,]),'LPAR':([14,16,18,24,25,34,35,38,44,49,50,51,52,53,54,58,60,63,64,65,66,67,77,],[34,38,34,34,34,34,34,34,34,34,34,-37,-38,-39,-40,34,77,34,-19,-20,-21,-22,34,]),'SUB':([14,18,24,25,30,31,32,33,34,35,36,38,41,44,45,46,48,49,50,51,52,53,54,55,56,58,63,64,65,66,67,69,70,72,73,74,75,77,80,],[35,35,35,35,52,-31,-32,-33,35,35,-36,35,52,35,52,52,-41,35,35,-37,-38,-39,-40,52,52,35,35,-19,-20,-21,-22,52,-42,52,52,-34,52,35,52,]),'LITERAL_STR':([14,18,24,25,34,35,38,44,49,50,51,52,53,54,58,63,64,65,66,67,77,],[36,36,36,36,36,36,36,36,36,36,-37,-38,-39,-40,36,36,-19,-20,-21,-22,36,]),'COMMA':([26,27,29,30,31,32,33,36,48,56,70,71,72,73,74,],[47,-46,49,-48,-31,-32,-33,-36,-41,-35,-42,-45,-47,-30,-34,]),'ADD':([30,31,32,33,36,41,45,46,48,55,56,69,70,72,73,74,75,80,],[51,-31,-32,-33,-36,51,51,51,-41,51,51,51,-42,51,51,-34,51,51,]),'MUL':([30,31,32,33,36,41,45,46,48,55,56,69,70,72,73,74,75,80,],[53,-31,-32,-33,-36,53,53,53,-41,53,53,53,-42,53,53,-34,53,53,]),'DIV':([30,31,32,33,36,41,45,46,48,55,56,69,70,72,73,74,75,80,],[54,-31,-32,-33,-36,54,54,54,-41,54,54,54,-42,54,54,-34,54,54,]),'LT':([31,32,33,36,41,48,56,70,73,74,],[-31,-32,-33,-36,64,-41,-35,-42,-30,-34,]),'GT':([31,32,33,36,41,48,56,70,73,74,],[-31,-32,-33,-36,65,-41,-35,-42,-30,-34,]),'LEQ':([31,32,33,36,41,48,56,70,73,74,],[-31,-32,-33,-36,66,-41,-35,-42,-30,-34,]),'GEQ':([31,32,33,36,41,48,56,70,73,74,],[-31,-32,-33,-36,67,-41,-35,-42,-30,-34,]),'RBRACK':([31,32,33,36,46,48,56,70,73,74,75,],[-31,-32,-33,-36,70,-41,-35,-42,-30,-34,81,]),'RPAR':([31,32,33,36,48,55,56,59,70,73,74,80,83,],[-31,-32,-33,-36,-41,74,-35,76,-42,-30,-34,-18,86,]),'DO':([76,],[82,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,17,19,],[2,39,42,]),'stmt':([0,17,19,22,40,61,79,],[3,3,3,43,62,43,84,]),'assignment':([0,17,19,22,40,61,79,],[4,4,4,4,4,4,4,]),'read':([0,17,19,22,40,61,79,],[5,5,5,5,5,5,5,]),'write':([0,17,19,22,40,61,79,],[6,6,6,6,6,6,6,]),'declaration':([0,17,19,22,40,61,79,],[7,7,7,7,7,7,7,]),'construct_while':([0,17,19,22,40,61,79,],[8,8,8,8,8,8,8,]),'construct_repeat':([0,17,19,22,40,61,79,],[9,9,9,9,9,9,9,]),'construct_if':([0,17,19,22,40,61,79,],[10,10,10,10,10,10,10,]),'block':([0,17,19,22,40,61,79,82,],[11,11,11,11,11,11,11,85,]),'datatype':([0,17,19,22,40,61,79,],[15,15,15,15,15,15,15,]),'arr_idx':([12,28,],[23,48,]),'varlist':([13,],[26,]),'varref':([13,14,18,24,25,34,35,38,44,47,49,50,58,63,77,],[27,31,31,31,31,31,31,31,31,71,31,31,31,31,31,]),'expr_list':([14,],[29,]),'a_expr':([14,18,24,25,34,35,38,44,49,50,58,63,77,],[30,41,45,46,55,56,41,69,72,73,75,80,41,]),'l_expr':([18,38,77,],[40,59,83,]),'a_op':([30,41,45,46,55,56,69,72,73,75,80,],[50,50,50,50,50,50,50,50,50,50,50,]),'arr_size':([37,],[57,]),'oprel':([41,],[63,]),'construct_else':([62,],[78,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list SEMICOLON','program',2,'p_program','parser.py',134),
  ('stmt_list -> stmt_list SEMICOLON stmt','stmt_list',3,'p_stmt_list','parser.py',137),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','parser.py',138),
  ('stmt -> assignment','stmt',1,'p_stmt','parser.py',141),
  ('stmt -> read','stmt',1,'p_stmt','parser.py',142),
  ('stmt -> write','stmt',1,'p_stmt','parser.py',143),
  ('stmt -> declaration','stmt',1,'p_stmt','parser.py',144),
  ('stmt -> construct_while','stmt',1,'p_stmt','parser.py',145),
  ('stmt -> construct_repeat','stmt',1,'p_stmt','parser.py',146),
  ('stmt -> construct_if','stmt',1,'p_stmt','parser.py',147),
  ('stmt -> block','stmt',1,'p_stmt','parser.py',148),
  ('block -> BEGIN stmt_list END','block',3,'p_block','parser.py',151),
  ('construct_while -> WHILE LPAR l_expr RPAR DO block','construct_while',6,'p_construct_while','parser.py',155),
  ('construct_repeat -> REPEAT stmt_list UNTIL LPAR l_expr RPAR','construct_repeat',6,'p_construct_repeat','parser.py',160),
  ('construct_if -> IF l_expr stmt construct_else','construct_if',4,'p_construct_if','parser.py',163),
  ('construct_else -> <empty>','construct_else',0,'p_construct_else','parser.py',172),
  ('construct_else -> ELSE stmt','construct_else',2,'p_construct_else','parser.py',173),
  ('l_expr -> a_expr oprel a_expr','l_expr',3,'p_l_expr','parser.py',179),
  ('oprel -> LT','oprel',1,'p_oprel','parser.py',191),
  ('oprel -> GT','oprel',1,'p_oprel','parser.py',192),
  ('oprel -> LEQ','oprel',1,'p_oprel','parser.py',193),
  ('oprel -> GEQ','oprel',1,'p_oprel','parser.py',194),
  ('assignment -> ID arr_idx ASSIGN a_expr','assignment',4,'p_assignment','parser.py',198),
  ('assignment -> ID ASSIGN a_expr','assignment',3,'p_assignment','parser.py',199),
  ('declaration -> datatype ID arr_size','declaration',3,'p_declaration','parser.py',206),
  ('arr_size -> LBRACK a_expr RBRACK','arr_size',3,'p_arr_size','parser.py',213),
  ('arr_size -> <empty>','arr_size',0,'p_arr_size','parser.py',214),
  ('datatype -> DT_INT','datatype',1,'p_datatype','parser.py',221),
  ('datatype -> DT_FLOAT','datatype',1,'p_datatype','parser.py',222),
  ('a_expr -> a_expr a_op a_expr','a_expr',3,'p_a_expr','parser.py',226),
  ('a_expr -> varref','a_expr',1,'p_a_expr','parser.py',227),
  ('a_expr -> INTEGER','a_expr',1,'p_a_expr','parser.py',228),
  ('a_expr -> FLOAT','a_expr',1,'p_a_expr','parser.py',229),
  ('a_expr -> LPAR a_expr RPAR','a_expr',3,'p_a_expr','parser.py',230),
  ('a_expr -> SUB a_expr','a_expr',2,'p_a_expr','parser.py',231),
  ('a_expr -> LITERAL_STR','a_expr',1,'p_a_expr','parser.py',232),
  ('a_op -> ADD','a_op',1,'p_a_op','parser.py',250),
  ('a_op -> SUB','a_op',1,'p_a_op','parser.py',251),
  ('a_op -> MUL','a_op',1,'p_a_op','parser.py',252),
  ('a_op -> DIV','a_op',1,'p_a_op','parser.py',253),
  ('varref -> ID arr_idx','varref',2,'p_varref','parser.py',257),
  ('arr_idx -> LBRACK a_expr RBRACK','arr_idx',3,'p_arr_idx','parser.py',261),
  ('read -> READ varlist','read',2,'p_read','parser.py',265),
  ('write -> WRITE expr_list','write',2,'p_write','parser.py',268),
  ('varlist -> varlist COMMA varref','varlist',3,'p_varlist','parser.py',271),
  ('varlist -> varref','varlist',1,'p_varlist','parser.py',272),
  ('expr_list -> expr_list COMMA a_expr','expr_list',3,'p_expr_list','parser.py',275),
  ('expr_list -> a_expr','expr_list',1,'p_expr_list','parser.py',276),
]
