
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD ASSIGN BEGIN COMMA DIV DO DT_FLOAT DT_INT ELSE END FLOAT GEQ GT ID IF INTEGER LBRACK LEQ LITERAL_STR LPAR LT MUL RBRACK READ REPEAT RPAR SEMICOLON SUB THEN UNTIL WHILE WRITEprogram : stmt_list SEMICOLONstmt_list : stmt_list SEMICOLON stmt\n                 | stmtstmt : assignment\n            | read\n            | write\n            | declaration\n            | construct_while\n            | construct_repeat\n            | construct_ifconstruct_while : WHILE LPAR l_expr RPAR DO stmtconstruct_repeat : REPEAT stmt_list UNTIL LPAR l_expr RPARconstruct_if : IF LPAR l_expr RPAR stmt construct_elseconstruct_else : \n                      | ELSE stmtl_expr : a_expr oprel a_exproprel : LT\n             | GT\n             | LEQ\n             | GEQassignment : ID arr_idx ASSIGN a_exprdeclaration : datatype ID arr_sizearr_size : LBRACK a_expr RBRACK\n                | datatype : DT_INT\n                | DT_FLOATa_expr : a_expr a_op a_expr\n              | varref\n              | INTEGER\n              | FLOAT\n              | LPAR a_expr RPAR\n              | SUB a_expr\n              | LITERAL_STRa_op : ADD\n            | SUB\n            | MUL\n            | DIVvarref : ID arr_idxarr_idx : LBRACK a_expr RBRACKread : READ varlistwrite : WRITE expr_listvarlist : varlist COMMA varref\n               | varrefexpr_list : expr_list COMMA a_expr\n                 | a_expr'
    
_lr_action_items = {'ID':([0,12,13,14,16,18,19,20,22,31,32,35,37,39,41,43,44,45,46,47,48,52,56,66,67,68,69,70,71,72,74,81,],[11,25,25,34,11,-25,-26,11,25,25,25,25,25,25,25,25,25,-34,-35,-36,-37,25,11,25,-17,-18,-19,-20,25,11,11,11,]),'READ':([0,16,20,56,72,74,81,],[12,12,12,12,12,12,12,]),'WRITE':([0,16,20,56,72,74,81,],[13,13,13,13,13,13,13,]),'WHILE':([0,16,20,56,72,74,81,],[15,15,15,15,15,15,15,]),'REPEAT':([0,16,20,56,72,74,81,],[16,16,16,16,16,16,16,]),'IF':([0,16,20,56,72,74,81,],[17,17,17,17,17,17,17,]),'DT_INT':([0,16,20,56,72,74,81,],[18,18,18,18,18,18,18,]),'DT_FLOAT':([0,16,20,56,72,74,81,],[19,19,19,19,19,19,19,]),'$end':([1,20,],[0,-1,]),'SEMICOLON':([2,3,4,5,6,7,8,9,10,23,24,26,27,28,29,30,33,34,36,38,42,50,51,58,59,60,61,62,63,73,77,78,79,80,82,],[20,-3,-4,-5,-6,-7,-8,-9,-10,-40,-43,-41,-45,-28,-29,-30,-33,-24,56,-2,-38,-32,-22,-21,-39,-42,-44,-27,-31,-23,-14,-11,-12,-13,-15,]),'UNTIL':([3,4,5,6,7,8,9,10,23,24,26,27,28,29,30,33,34,36,38,42,50,51,58,59,60,61,62,63,73,77,78,79,80,82,],[-3,-4,-5,-6,-7,-8,-9,-10,-40,-43,-41,-45,-28,-29,-30,-33,-24,55,-2,-38,-32,-22,-21,-39,-42,-44,-27,-31,-23,-14,-11,-12,-13,-15,]),'ELSE':([4,5,6,7,8,9,10,23,24,26,27,28,29,30,33,34,42,50,51,58,59,60,61,62,63,73,77,78,79,80,82,],[-4,-5,-6,-7,-8,-9,-10,-40,-43,-41,-45,-28,-29,-30,-33,-24,-38,-32,-22,-21,-39,-42,-44,-27,-31,-23,81,-11,-12,-13,-15,]),'LBRACK':([11,25,34,],[22,22,52,]),'INTEGER':([13,22,31,32,35,37,39,43,44,45,46,47,48,52,66,67,68,69,70,71,],[29,29,29,29,29,29,29,29,29,-34,-35,-36,-37,29,29,-17,-18,-19,-20,29,]),'FLOAT':([13,22,31,32,35,37,39,43,44,45,46,47,48,52,66,67,68,69,70,71,],[30,30,30,30,30,30,30,30,30,-34,-35,-36,-37,30,30,-17,-18,-19,-20,30,]),'LPAR':([13,15,17,22,31,32,35,37,39,43,44,45,46,47,48,52,55,66,67,68,69,70,71,],[31,35,37,31,31,31,31,31,31,31,31,-34,-35,-36,-37,31,71,31,-17,-18,-19,-20,31,]),'SUB':([13,22,27,28,29,30,31,32,33,35,37,39,40,42,43,44,45,46,47,48,49,50,52,54,58,59,61,62,63,64,66,67,68,69,70,71,75,],[32,32,46,-28,-29,-30,32,32,-33,32,32,32,46,-38,32,32,-34,-35,-36,-37,46,46,32,46,46,-39,46,46,-31,46,32,-17,-18,-19,-20,32,46,]),'LITERAL_STR':([13,22,31,32,35,37,39,43,44,45,46,47,48,52,66,67,68,69,70,71,],[33,33,33,33,33,33,33,33,33,-34,-35,-36,-37,33,33,-17,-18,-19,-20,33,]),'ASSIGN':([21,59,],[39,-39,]),'COMMA':([23,24,26,27,28,29,30,33,42,50,59,60,61,62,63,],[41,-43,43,-45,-28,-29,-30,-33,-38,-32,-39,-42,-44,-27,-31,]),'ADD':([27,28,29,30,33,40,42,49,50,54,58,59,61,62,63,64,75,],[45,-28,-29,-30,-33,45,-38,45,45,45,45,-39,45,45,-31,45,45,]),'MUL':([27,28,29,30,33,40,42,49,50,54,58,59,61,62,63,64,75,],[47,-28,-29,-30,-33,47,-38,47,47,47,47,-39,47,47,-31,47,47,]),'DIV':([27,28,29,30,33,40,42,49,50,54,58,59,61,62,63,64,75,],[48,-28,-29,-30,-33,48,-38,48,48,48,48,-39,48,48,-31,48,48,]),'RBRACK':([28,29,30,33,40,42,50,59,62,63,64,],[-28,-29,-30,-33,59,-38,-32,-39,-27,-31,73,]),'RPAR':([28,29,30,33,42,49,50,53,57,59,62,63,75,76,],[-28,-29,-30,-33,-38,63,-32,65,72,-39,-27,-31,-16,79,]),'LT':([28,29,30,33,42,50,54,59,62,63,],[-28,-29,-30,-33,-38,-32,67,-39,-27,-31,]),'GT':([28,29,30,33,42,50,54,59,62,63,],[-28,-29,-30,-33,-38,-32,68,-39,-27,-31,]),'LEQ':([28,29,30,33,42,50,54,59,62,63,],[-28,-29,-30,-33,-38,-32,69,-39,-27,-31,]),'GEQ':([28,29,30,33,42,50,54,59,62,63,],[-28,-29,-30,-33,-38,-32,70,-39,-27,-31,]),'DO':([65,],[74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,16,],[2,36,]),'stmt':([0,16,20,56,72,74,81,],[3,3,38,38,77,78,82,]),'assignment':([0,16,20,56,72,74,81,],[4,4,4,4,4,4,4,]),'read':([0,16,20,56,72,74,81,],[5,5,5,5,5,5,5,]),'write':([0,16,20,56,72,74,81,],[6,6,6,6,6,6,6,]),'declaration':([0,16,20,56,72,74,81,],[7,7,7,7,7,7,7,]),'construct_while':([0,16,20,56,72,74,81,],[8,8,8,8,8,8,8,]),'construct_repeat':([0,16,20,56,72,74,81,],[9,9,9,9,9,9,9,]),'construct_if':([0,16,20,56,72,74,81,],[10,10,10,10,10,10,10,]),'datatype':([0,16,20,56,72,74,81,],[14,14,14,14,14,14,14,]),'arr_idx':([11,25,],[21,42,]),'varlist':([12,],[23,]),'varref':([12,13,22,31,32,35,37,39,41,43,44,52,66,71,],[24,28,28,28,28,28,28,28,60,28,28,28,28,28,]),'expr_list':([13,],[26,]),'a_expr':([13,22,31,32,35,37,39,43,44,52,66,71,],[27,40,49,50,54,54,58,61,62,64,75,54,]),'a_op':([27,40,49,50,54,58,61,62,64,75,],[44,44,44,44,44,44,44,44,44,44,]),'arr_size':([34,],[51,]),'l_expr':([35,37,71,],[53,57,76,]),'oprel':([54,],[66,]),'construct_else':([77,],[80,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list SEMICOLON','program',2,'p_program','parser.py',134),
  ('stmt_list -> stmt_list SEMICOLON stmt','stmt_list',3,'p_stmt_list','parser.py',137),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','parser.py',138),
  ('stmt -> assignment','stmt',1,'p_stmt','parser.py',141),
  ('stmt -> read','stmt',1,'p_stmt','parser.py',142),
  ('stmt -> write','stmt',1,'p_stmt','parser.py',143),
  ('stmt -> declaration','stmt',1,'p_stmt','parser.py',144),
  ('stmt -> construct_while','stmt',1,'p_stmt','parser.py',145),
  ('stmt -> construct_repeat','stmt',1,'p_stmt','parser.py',146),
  ('stmt -> construct_if','stmt',1,'p_stmt','parser.py',147),
  ('construct_while -> WHILE LPAR l_expr RPAR DO stmt','construct_while',6,'p_construct_while','parser.py',150),
  ('construct_repeat -> REPEAT stmt_list UNTIL LPAR l_expr RPAR','construct_repeat',6,'p_construct_repeat','parser.py',153),
  ('construct_if -> IF LPAR l_expr RPAR stmt construct_else','construct_if',6,'p_construct_if','parser.py',156),
  ('construct_else -> <empty>','construct_else',0,'p_construct_else','parser.py',159),
  ('construct_else -> ELSE stmt','construct_else',2,'p_construct_else','parser.py',160),
  ('l_expr -> a_expr oprel a_expr','l_expr',3,'p_l_expr','parser.py',163),
  ('oprel -> LT','oprel',1,'p_oprel','parser.py',174),
  ('oprel -> GT','oprel',1,'p_oprel','parser.py',175),
  ('oprel -> LEQ','oprel',1,'p_oprel','parser.py',176),
  ('oprel -> GEQ','oprel',1,'p_oprel','parser.py',177),
  ('assignment -> ID arr_idx ASSIGN a_expr','assignment',4,'p_assignment','parser.py',181),
  ('declaration -> datatype ID arr_size','declaration',3,'p_declaration','parser.py',185),
  ('arr_size -> LBRACK a_expr RBRACK','arr_size',3,'p_arr_size','parser.py',192),
  ('arr_size -> <empty>','arr_size',0,'p_arr_size','parser.py',193),
  ('datatype -> DT_INT','datatype',1,'p_datatype','parser.py',200),
  ('datatype -> DT_FLOAT','datatype',1,'p_datatype','parser.py',201),
  ('a_expr -> a_expr a_op a_expr','a_expr',3,'p_a_expr','parser.py',205),
  ('a_expr -> varref','a_expr',1,'p_a_expr','parser.py',206),
  ('a_expr -> INTEGER','a_expr',1,'p_a_expr','parser.py',207),
  ('a_expr -> FLOAT','a_expr',1,'p_a_expr','parser.py',208),
  ('a_expr -> LPAR a_expr RPAR','a_expr',3,'p_a_expr','parser.py',209),
  ('a_expr -> SUB a_expr','a_expr',2,'p_a_expr','parser.py',210),
  ('a_expr -> LITERAL_STR','a_expr',1,'p_a_expr','parser.py',211),
  ('a_op -> ADD','a_op',1,'p_a_op','parser.py',237),
  ('a_op -> SUB','a_op',1,'p_a_op','parser.py',238),
  ('a_op -> MUL','a_op',1,'p_a_op','parser.py',239),
  ('a_op -> DIV','a_op',1,'p_a_op','parser.py',240),
  ('varref -> ID arr_idx','varref',2,'p_varref','parser.py',244),
  ('arr_idx -> LBRACK a_expr RBRACK','arr_idx',3,'p_arr_idx','parser.py',248),
  ('read -> READ varlist','read',2,'p_read','parser.py',252),
  ('write -> WRITE expr_list','write',2,'p_write','parser.py',255),
  ('varlist -> varlist COMMA varref','varlist',3,'p_varlist','parser.py',258),
  ('varlist -> varref','varlist',1,'p_varlist','parser.py',259),
  ('expr_list -> expr_list COMMA a_expr','expr_list',3,'p_expr_list','parser.py',262),
  ('expr_list -> a_expr','expr_list',1,'p_expr_list','parser.py',263),
]
