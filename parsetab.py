
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD ASSIGN BEGIN COMMA DIV DO DT_FLOAT DT_INT ELSE END FLOAT GEQ GT ID IF INTEGER LBRACK LEQ LITERAL_STR LPAR LT MUL RBRACK READ REPEAT RPAR SEMICOLON SUB THEN UNTIL WHILE WRITEprogram : stmt_list SEMICOLONstmt_list : stmt_list SEMICOLON\n                 | stmtstmt : assignment\n            | read\n            | write\n            | declaration\n            | construct_while\n            | construct_repeat\n            | construct_if\n            | blockblock : BEGIN stmt_list ENDconstruct_while : WHILE LPAR l_expr RPAR DO stmtconstruct_repeat : REPEAT stmt_list UNTIL LPAR l_expr RPARconstruct_if : IF LPAR l_expr RPAR stmt construct_elseconstruct_else : \n                      | ELSE stmtl_expr : a_expr oprel a_exproprel : LT\n             | GT\n             | LEQ\n             | GEQassignment : ID arr_idx ASSIGN a_exprdeclaration : datatype ID arr_sizearr_size : LBRACK INTEGER RBRACKdatatype : DT_INT\n                | DT_FLOATa_expr : a_expr a_op a_expr\n              | varref\n              | INTEGER\n              | FLOAT\n              | LPAR a_expr RPAR\n              | SUB a_expr\n              | LITERAL_STRa_op : ADD\n            | SUB\n            | MUL\n            | DIVvarref : ID arr_idxarr_idx : LBRACK a_expr RBRACKread : READ varlistwrite : WRITE expr_listvarlist : varlist COMMA varref\n               | varrefexpr_list : expr_list COMMA a_expr\n                 | a_expr'
    
_lr_action_items = {'ID':([0,13,14,15,17,19,20,21,24,33,34,37,39,41,43,45,46,47,48,49,50,69,70,71,72,73,74,75,77,84,],[12,27,27,36,12,12,-26,-27,27,27,27,27,27,27,27,27,27,-35,-36,-37,-38,27,-19,-20,-21,-22,27,12,12,12,]),'READ':([0,17,19,75,77,84,],[13,13,13,13,13,13,]),'WRITE':([0,17,19,75,77,84,],[14,14,14,14,14,14,]),'WHILE':([0,17,19,75,77,84,],[16,16,16,16,16,16,]),'REPEAT':([0,17,19,75,77,84,],[17,17,17,17,17,17,]),'IF':([0,17,19,75,77,84,],[18,18,18,18,18,18,]),'BEGIN':([0,17,19,75,77,84,],[19,19,19,19,19,19,]),'DT_INT':([0,17,19,75,77,84,],[20,20,20,20,20,20,]),'DT_FLOAT':([0,17,19,75,77,84,],[21,21,21,21,21,21,]),'$end':([1,22,],[0,-1,]),'SEMICOLON':([2,3,4,5,6,7,8,9,10,11,22,25,26,28,29,30,31,32,35,38,40,44,52,53,58,60,61,62,63,64,65,66,76,80,81,82,83,85,],[22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-2,-41,-44,-42,-46,-29,-30,-31,-34,58,58,-39,-33,-24,-2,-12,-23,-40,-43,-45,-28,-32,-25,-16,-13,-14,-15,-17,]),'UNTIL':([3,4,5,6,7,8,9,10,11,25,26,28,29,30,31,32,35,38,44,52,53,58,60,61,62,63,64,65,66,76,80,81,82,83,85,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-41,-44,-42,-46,-29,-30,-31,-34,57,-39,-33,-24,-2,-12,-23,-40,-43,-45,-28,-32,-25,-16,-13,-14,-15,-17,]),'END':([3,4,5,6,7,8,9,10,11,25,26,28,29,30,31,32,35,40,44,52,53,58,60,61,62,63,64,65,66,76,80,81,82,83,85,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-41,-44,-42,-46,-29,-30,-31,-34,60,-39,-33,-24,-2,-12,-23,-40,-43,-45,-28,-32,-25,-16,-13,-14,-15,-17,]),'ELSE':([4,5,6,7,8,9,10,11,25,26,28,29,30,31,32,35,44,52,53,60,61,62,63,64,65,66,76,80,81,82,83,85,],[-4,-5,-6,-7,-8,-9,-10,-11,-41,-44,-42,-46,-29,-30,-31,-34,-39,-33,-24,-12,-23,-40,-43,-45,-28,-32,-25,84,-13,-14,-15,-17,]),'LBRACK':([12,27,36,],[24,24,54,]),'INTEGER':([14,24,33,34,37,39,41,45,46,47,48,49,50,54,69,70,71,72,73,74,],[31,31,31,31,31,31,31,31,31,-35,-36,-37,-38,67,31,-19,-20,-21,-22,31,]),'FLOAT':([14,24,33,34,37,39,41,45,46,47,48,49,50,69,70,71,72,73,74,],[32,32,32,32,32,32,32,32,32,-35,-36,-37,-38,32,-19,-20,-21,-22,32,]),'LPAR':([14,16,18,24,33,34,37,39,41,45,46,47,48,49,50,57,69,70,71,72,73,74,],[33,37,39,33,33,33,33,33,33,33,33,-35,-36,-37,-38,74,33,-19,-20,-21,-22,33,]),'SUB':([14,24,29,30,31,32,33,34,35,37,39,41,42,44,45,46,47,48,49,50,51,52,56,61,62,64,65,66,69,70,71,72,73,74,78,],[34,34,48,-29,-30,-31,34,34,-34,34,34,34,48,-39,34,34,-35,-36,-37,-38,48,48,48,48,-40,48,48,-32,34,-19,-20,-21,-22,34,48,]),'LITERAL_STR':([14,24,33,34,37,39,41,45,46,47,48,49,50,69,70,71,72,73,74,],[35,35,35,35,35,35,35,35,35,-35,-36,-37,-38,35,-19,-20,-21,-22,35,]),'ASSIGN':([23,62,],[41,-40,]),'COMMA':([25,26,28,29,30,31,32,35,44,52,62,63,64,65,66,],[43,-44,45,-46,-29,-30,-31,-34,-39,-33,-40,-43,-45,-28,-32,]),'ADD':([29,30,31,32,35,42,44,51,52,56,61,62,64,65,66,78,],[47,-29,-30,-31,-34,47,-39,47,47,47,47,-40,47,47,-32,47,]),'MUL':([29,30,31,32,35,42,44,51,52,56,61,62,64,65,66,78,],[49,-29,-30,-31,-34,49,-39,49,49,49,49,-40,49,49,-32,49,]),'DIV':([29,30,31,32,35,42,44,51,52,56,61,62,64,65,66,78,],[50,-29,-30,-31,-34,50,-39,50,50,50,50,-40,50,50,-32,50,]),'RBRACK':([30,31,32,35,42,44,52,62,65,66,67,],[-29,-30,-31,-34,62,-39,-33,-40,-28,-32,76,]),'RPAR':([30,31,32,35,44,51,52,55,59,62,65,66,78,79,],[-29,-30,-31,-34,-39,66,-33,68,75,-40,-28,-32,-18,82,]),'LT':([30,31,32,35,44,52,56,62,65,66,],[-29,-30,-31,-34,-39,-33,70,-40,-28,-32,]),'GT':([30,31,32,35,44,52,56,62,65,66,],[-29,-30,-31,-34,-39,-33,71,-40,-28,-32,]),'LEQ':([30,31,32,35,44,52,56,62,65,66,],[-29,-30,-31,-34,-39,-33,72,-40,-28,-32,]),'GEQ':([30,31,32,35,44,52,56,62,65,66,],[-29,-30,-31,-34,-39,-33,73,-40,-28,-32,]),'DO':([68,],[77,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,17,19,],[2,38,40,]),'stmt':([0,17,19,75,77,84,],[3,3,3,80,81,85,]),'assignment':([0,17,19,75,77,84,],[4,4,4,4,4,4,]),'read':([0,17,19,75,77,84,],[5,5,5,5,5,5,]),'write':([0,17,19,75,77,84,],[6,6,6,6,6,6,]),'declaration':([0,17,19,75,77,84,],[7,7,7,7,7,7,]),'construct_while':([0,17,19,75,77,84,],[8,8,8,8,8,8,]),'construct_repeat':([0,17,19,75,77,84,],[9,9,9,9,9,9,]),'construct_if':([0,17,19,75,77,84,],[10,10,10,10,10,10,]),'block':([0,17,19,75,77,84,],[11,11,11,11,11,11,]),'datatype':([0,17,19,75,77,84,],[15,15,15,15,15,15,]),'arr_idx':([12,27,],[23,44,]),'varlist':([13,],[25,]),'varref':([13,14,24,33,34,37,39,41,43,45,46,69,74,],[26,30,30,30,30,30,30,30,63,30,30,30,30,]),'expr_list':([14,],[28,]),'a_expr':([14,24,33,34,37,39,41,45,46,69,74,],[29,42,51,52,56,56,61,64,65,78,56,]),'a_op':([29,42,51,52,56,61,64,65,78,],[46,46,46,46,46,46,46,46,46,]),'arr_size':([36,],[53,]),'l_expr':([37,39,74,],[55,59,79,]),'oprel':([56,],[69,]),'construct_else':([80,],[83,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list SEMICOLON','program',2,'p_program','parser.py',132),
  ('stmt_list -> stmt_list SEMICOLON','stmt_list',2,'p_stmt_list','parser.py',135),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','parser.py',136),
  ('stmt -> assignment','stmt',1,'p_stmt','parser.py',139),
  ('stmt -> read','stmt',1,'p_stmt','parser.py',140),
  ('stmt -> write','stmt',1,'p_stmt','parser.py',141),
  ('stmt -> declaration','stmt',1,'p_stmt','parser.py',142),
  ('stmt -> construct_while','stmt',1,'p_stmt','parser.py',143),
  ('stmt -> construct_repeat','stmt',1,'p_stmt','parser.py',144),
  ('stmt -> construct_if','stmt',1,'p_stmt','parser.py',145),
  ('stmt -> block','stmt',1,'p_stmt','parser.py',146),
  ('block -> BEGIN stmt_list END','block',3,'p_block','parser.py',149),
  ('construct_while -> WHILE LPAR l_expr RPAR DO stmt','construct_while',6,'p_construct_while','parser.py',152),
  ('construct_repeat -> REPEAT stmt_list UNTIL LPAR l_expr RPAR','construct_repeat',6,'p_construct_repeat','parser.py',155),
  ('construct_if -> IF LPAR l_expr RPAR stmt construct_else','construct_if',6,'p_construct_if','parser.py',158),
  ('construct_else -> <empty>','construct_else',0,'p_construct_else','parser.py',161),
  ('construct_else -> ELSE stmt','construct_else',2,'p_construct_else','parser.py',162),
  ('l_expr -> a_expr oprel a_expr','l_expr',3,'p_l_expr','parser.py',165),
  ('oprel -> LT','oprel',1,'p_oprel','parser.py',168),
  ('oprel -> GT','oprel',1,'p_oprel','parser.py',169),
  ('oprel -> LEQ','oprel',1,'p_oprel','parser.py',170),
  ('oprel -> GEQ','oprel',1,'p_oprel','parser.py',171),
  ('assignment -> ID arr_idx ASSIGN a_expr','assignment',4,'p_assignment','parser.py',174),
  ('declaration -> datatype ID arr_size','declaration',3,'p_declaration','parser.py',177),
  ('arr_size -> LBRACK INTEGER RBRACK','arr_size',3,'p_arr_size','parser.py',180),
  ('datatype -> DT_INT','datatype',1,'p_datatype','parser.py',183),
  ('datatype -> DT_FLOAT','datatype',1,'p_datatype','parser.py',184),
  ('a_expr -> a_expr a_op a_expr','a_expr',3,'p_a_expr','parser.py',187),
  ('a_expr -> varref','a_expr',1,'p_a_expr','parser.py',188),
  ('a_expr -> INTEGER','a_expr',1,'p_a_expr','parser.py',189),
  ('a_expr -> FLOAT','a_expr',1,'p_a_expr','parser.py',190),
  ('a_expr -> LPAR a_expr RPAR','a_expr',3,'p_a_expr','parser.py',191),
  ('a_expr -> SUB a_expr','a_expr',2,'p_a_expr','parser.py',192),
  ('a_expr -> LITERAL_STR','a_expr',1,'p_a_expr','parser.py',193),
  ('a_op -> ADD','a_op',1,'p_a_op','parser.py',196),
  ('a_op -> SUB','a_op',1,'p_a_op','parser.py',197),
  ('a_op -> MUL','a_op',1,'p_a_op','parser.py',198),
  ('a_op -> DIV','a_op',1,'p_a_op','parser.py',199),
  ('varref -> ID arr_idx','varref',2,'p_varref','parser.py',203),
  ('arr_idx -> LBRACK a_expr RBRACK','arr_idx',3,'p_arr_idx','parser.py',206),
  ('read -> READ varlist','read',2,'p_read','parser.py',209),
  ('write -> WRITE expr_list','write',2,'p_write','parser.py',212),
  ('varlist -> varlist COMMA varref','varlist',3,'p_varlist','parser.py',215),
  ('varlist -> varref','varlist',1,'p_varlist','parser.py',216),
  ('expr_list -> expr_list COMMA a_expr','expr_list',3,'p_expr_list','parser.py',219),
  ('expr_list -> a_expr','expr_list',1,'p_expr_list','parser.py',220),
]
