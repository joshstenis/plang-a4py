
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD ASSIGN BEGIN COMMA DIV DO DT_FLOAT DT_INT ELSE END FLOAT GEQ GT ID IF INTEGER LBRACK LEQ LITERAL_STR LPAR LT MUL RBRACK READ REPEAT RPAR SEMICOLON SUB THEN UNTIL WHILE WRITEprogram : stmt_list SEMICOLONstmt_list : stmt_list SEMICOLON stmt\n                 | stmtstmt : assignment\n            | read\n            | write\n            | declaration\n            | construct_while\n            | construct_repeat\n            | construct_if\n            | blockblock : BEGIN stmt_list ENDconstruct_while : WHILE LPAR l_expr RPAR DO blockconstruct_repeat : REPEAT stmt_list UNTIL LPAR l_expr RPARconstruct_if : IF LPAR l_expr RPAR stmt construct_elseconstruct_else : \n                      | ELSE stmtl_expr : a_expr oprel a_exproprel : LT\n             | GT\n             | LEQ\n             | GEQassignment : ID arr_idx ASSIGN a_expr\n                  | ID ASSIGN a_exprdeclaration : datatype ID arr_sizearr_size : LBRACK a_expr RBRACK\n                | datatype : DT_INT\n                | DT_FLOATa_expr : a_expr ADD a_term\n              | a_expr SUB a_term\n              | a_terma_term : a_term DIV a_fact\n              | a_term MUL a_fact\n              | a_facta_fact : varref\n              | INTEGER\n              | FLOAT\n              | LPAR a_expr RPAR\n              | SUB a_expr\n              | LITERAL_STRvarref : ID \n              | ID arr_idxarr_idx : LBRACK a_expr RBRACKread : READ varlistwrite : WRITE expr_listvarlist : varlist COMMA varref\n               | varrefexpr_list : expr_list COMMA a_expr\n                 | a_expr'
    
_lr_action_items = {'ID':([0,13,14,15,17,19,20,21,22,24,25,32,37,40,42,45,48,50,51,52,53,54,58,62,76,77,78,79,80,81,82,91,],[12,28,28,39,12,12,-28,-29,12,28,28,28,28,28,28,28,28,28,28,28,28,28,28,12,28,-19,-20,-21,-22,28,12,12,]),'READ':([0,17,19,22,62,82,91,],[13,13,13,13,13,13,13,]),'WRITE':([0,17,19,22,62,82,91,],[14,14,14,14,14,14,14,]),'WHILE':([0,17,19,22,62,82,91,],[16,16,16,16,16,16,16,]),'REPEAT':([0,17,19,22,62,82,91,],[17,17,17,17,17,17,17,]),'IF':([0,17,19,22,62,82,91,],[18,18,18,18,18,18,18,]),'BEGIN':([0,17,19,22,62,82,84,91,],[19,19,19,19,19,19,19,19,]),'DT_INT':([0,17,19,22,62,82,91,],[20,20,20,20,20,20,20,]),'DT_FLOAT':([0,17,19,22,62,82,91,],[21,21,21,21,21,21,21,]),'$end':([1,22,],[0,-1,]),'SEMICOLON':([2,3,4,5,6,7,8,9,10,11,26,27,28,29,30,31,33,34,35,36,38,39,41,43,44,46,49,55,57,64,65,66,67,68,69,70,71,72,73,83,87,88,89,90,92,],[22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-45,-48,-42,-46,-50,-32,-35,-36,-37,-38,-41,-27,62,62,-2,-24,-43,-40,-25,-12,-23,-44,-47,-49,-30,-31,-33,-34,-39,-26,-16,-13,-14,-15,-17,]),'UNTIL':([3,4,5,6,7,8,9,10,11,26,27,28,29,30,31,33,34,35,36,38,39,41,44,46,49,55,57,64,65,66,67,68,69,70,71,72,73,83,87,88,89,90,92,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-45,-48,-42,-46,-50,-32,-35,-36,-37,-38,-41,-27,61,-2,-24,-43,-40,-25,-12,-23,-44,-47,-49,-30,-31,-33,-34,-39,-26,-16,-13,-14,-15,-17,]),'END':([3,4,5,6,7,8,9,10,11,26,27,28,29,30,31,33,34,35,36,38,39,43,44,46,49,55,57,64,65,66,67,68,69,70,71,72,73,83,87,88,89,90,92,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-45,-48,-42,-46,-50,-32,-35,-36,-37,-38,-41,-27,64,-2,-24,-43,-40,-25,-12,-23,-44,-47,-49,-30,-31,-33,-34,-39,-26,-16,-13,-14,-15,-17,]),'ELSE':([4,5,6,7,8,9,10,11,26,27,28,29,30,31,33,34,35,36,38,39,46,49,55,57,64,65,66,67,68,69,70,71,72,73,83,87,88,89,90,92,],[-4,-5,-6,-7,-8,-9,-10,-11,-45,-48,-42,-46,-50,-32,-35,-36,-37,-38,-41,-27,-24,-43,-40,-25,-12,-23,-44,-47,-49,-30,-31,-33,-34,-39,-26,91,-13,-14,-15,-17,]),'ASSIGN':([12,23,66,],[24,45,-44,]),'LBRACK':([12,28,39,],[25,25,58,]),'INTEGER':([14,24,25,32,37,40,42,45,50,51,52,53,54,58,76,77,78,79,80,81,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-19,-20,-21,-22,35,]),'FLOAT':([14,24,25,32,37,40,42,45,50,51,52,53,54,58,76,77,78,79,80,81,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-19,-20,-21,-22,36,]),'LPAR':([14,16,18,24,25,32,37,40,42,45,50,51,52,53,54,58,61,76,77,78,79,80,81,],[37,40,42,37,37,37,37,37,37,37,37,37,37,37,37,37,81,37,-19,-20,-21,-22,37,]),'SUB':([14,24,25,28,30,31,32,33,34,35,36,37,38,40,42,45,46,47,49,50,51,52,53,54,55,56,58,60,65,66,68,69,70,71,72,73,74,76,77,78,79,80,81,85,],[32,32,32,-42,52,-32,32,-35,-36,-37,-38,32,-41,32,32,32,52,52,-43,32,32,32,32,32,52,52,32,52,52,-44,52,-30,-31,-33,-34,-39,52,32,-19,-20,-21,-22,32,52,]),'LITERAL_STR':([14,24,25,32,37,40,42,45,50,51,52,53,54,58,76,77,78,79,80,81,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-19,-20,-21,-22,38,]),'COMMA':([26,27,28,29,30,31,33,34,35,36,38,49,55,66,67,68,69,70,71,72,73,],[48,-48,-42,50,-50,-32,-35,-36,-37,-38,-41,-43,-40,-44,-47,-49,-30,-31,-33,-34,-39,]),'DIV':([28,31,33,34,35,36,38,49,55,66,69,70,71,72,73,],[-42,53,-35,-36,-37,-38,-41,-43,-40,-44,53,53,-33,-34,-39,]),'MUL':([28,31,33,34,35,36,38,49,55,66,69,70,71,72,73,],[-42,54,-35,-36,-37,-38,-41,-43,-40,-44,54,54,-33,-34,-39,]),'ADD':([28,30,31,33,34,35,36,38,46,47,49,55,56,60,65,66,68,69,70,71,72,73,74,85,],[-42,51,-32,-35,-36,-37,-38,-41,51,51,-43,51,51,51,51,-44,51,-30,-31,-33,-34,-39,51,51,]),'RBRACK':([28,31,33,34,35,36,38,47,49,55,66,69,70,71,72,73,74,],[-42,-32,-35,-36,-37,-38,-41,66,-43,-40,-44,-30,-31,-33,-34,-39,83,]),'RPAR':([28,31,33,34,35,36,38,49,55,56,59,63,66,69,70,71,72,73,85,86,],[-42,-32,-35,-36,-37,-38,-41,-43,-40,73,75,82,-44,-30,-31,-33,-34,-39,-18,89,]),'LT':([28,31,33,34,35,36,38,49,55,60,66,69,70,71,72,73,],[-42,-32,-35,-36,-37,-38,-41,-43,-40,77,-44,-30,-31,-33,-34,-39,]),'GT':([28,31,33,34,35,36,38,49,55,60,66,69,70,71,72,73,],[-42,-32,-35,-36,-37,-38,-41,-43,-40,78,-44,-30,-31,-33,-34,-39,]),'LEQ':([28,31,33,34,35,36,38,49,55,60,66,69,70,71,72,73,],[-42,-32,-35,-36,-37,-38,-41,-43,-40,79,-44,-30,-31,-33,-34,-39,]),'GEQ':([28,31,33,34,35,36,38,49,55,60,66,69,70,71,72,73,],[-42,-32,-35,-36,-37,-38,-41,-43,-40,80,-44,-30,-31,-33,-34,-39,]),'DO':([75,],[84,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,17,19,],[2,41,43,]),'stmt':([0,17,19,22,62,82,91,],[3,3,3,44,44,87,92,]),'assignment':([0,17,19,22,62,82,91,],[4,4,4,4,4,4,4,]),'read':([0,17,19,22,62,82,91,],[5,5,5,5,5,5,5,]),'write':([0,17,19,22,62,82,91,],[6,6,6,6,6,6,6,]),'declaration':([0,17,19,22,62,82,91,],[7,7,7,7,7,7,7,]),'construct_while':([0,17,19,22,62,82,91,],[8,8,8,8,8,8,8,]),'construct_repeat':([0,17,19,22,62,82,91,],[9,9,9,9,9,9,9,]),'construct_if':([0,17,19,22,62,82,91,],[10,10,10,10,10,10,10,]),'block':([0,17,19,22,62,82,84,91,],[11,11,11,11,11,11,88,11,]),'datatype':([0,17,19,22,62,82,91,],[15,15,15,15,15,15,15,]),'arr_idx':([12,28,],[23,49,]),'varlist':([13,],[26,]),'varref':([13,14,24,25,32,37,40,42,45,48,50,51,52,53,54,58,76,81,],[27,34,34,34,34,34,34,34,34,67,34,34,34,34,34,34,34,34,]),'expr_list':([14,],[29,]),'a_expr':([14,24,25,32,37,40,42,45,50,58,76,81,],[30,46,47,55,56,60,60,65,68,74,85,60,]),'a_term':([14,24,25,32,37,40,42,45,50,51,52,58,76,81,],[31,31,31,31,31,31,31,31,31,69,70,31,31,31,]),'a_fact':([14,24,25,32,37,40,42,45,50,51,52,53,54,58,76,81,],[33,33,33,33,33,33,33,33,33,33,33,71,72,33,33,33,]),'arr_size':([39,],[57,]),'l_expr':([40,42,81,],[59,63,86,]),'oprel':([60,],[76,]),'construct_else':([87,],[90,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list SEMICOLON','program',2,'p_program','parser.py',148),
  ('stmt_list -> stmt_list SEMICOLON stmt','stmt_list',3,'p_stmt_list','parser.py',151),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','parser.py',152),
  ('stmt -> assignment','stmt',1,'p_stmt','parser.py',155),
  ('stmt -> read','stmt',1,'p_stmt','parser.py',156),
  ('stmt -> write','stmt',1,'p_stmt','parser.py',157),
  ('stmt -> declaration','stmt',1,'p_stmt','parser.py',158),
  ('stmt -> construct_while','stmt',1,'p_stmt','parser.py',159),
  ('stmt -> construct_repeat','stmt',1,'p_stmt','parser.py',160),
  ('stmt -> construct_if','stmt',1,'p_stmt','parser.py',161),
  ('stmt -> block','stmt',1,'p_stmt','parser.py',162),
  ('block -> BEGIN stmt_list END','block',3,'p_block','parser.py',165),
  ('construct_while -> WHILE LPAR l_expr RPAR DO block','construct_while',6,'p_construct_while','parser.py',169),
  ('construct_repeat -> REPEAT stmt_list UNTIL LPAR l_expr RPAR','construct_repeat',6,'p_construct_repeat','parser.py',174),
  ('construct_if -> IF LPAR l_expr RPAR stmt construct_else','construct_if',6,'p_construct_if','parser.py',177),
  ('construct_else -> <empty>','construct_else',0,'p_construct_else','parser.py',187),
  ('construct_else -> ELSE stmt','construct_else',2,'p_construct_else','parser.py',188),
  ('l_expr -> a_expr oprel a_expr','l_expr',3,'p_l_expr','parser.py',194),
  ('oprel -> LT','oprel',1,'p_oprel','parser.py',206),
  ('oprel -> GT','oprel',1,'p_oprel','parser.py',207),
  ('oprel -> LEQ','oprel',1,'p_oprel','parser.py',208),
  ('oprel -> GEQ','oprel',1,'p_oprel','parser.py',209),
  ('assignment -> ID arr_idx ASSIGN a_expr','assignment',4,'p_assignment','parser.py',216),
  ('assignment -> ID ASSIGN a_expr','assignment',3,'p_assignment','parser.py',217),
  ('declaration -> datatype ID arr_size','declaration',3,'p_declaration','parser.py',224),
  ('arr_size -> LBRACK a_expr RBRACK','arr_size',3,'p_arr_size','parser.py',231),
  ('arr_size -> <empty>','arr_size',0,'p_arr_size','parser.py',232),
  ('datatype -> DT_INT','datatype',1,'p_datatype','parser.py',239),
  ('datatype -> DT_FLOAT','datatype',1,'p_datatype','parser.py',240),
  ('a_expr -> a_expr ADD a_term','a_expr',3,'p_a_expr','parser.py',244),
  ('a_expr -> a_expr SUB a_term','a_expr',3,'p_a_expr','parser.py',245),
  ('a_expr -> a_term','a_expr',1,'p_a_expr','parser.py',246),
  ('a_term -> a_term DIV a_fact','a_term',3,'p_a_term','parser.py',257),
  ('a_term -> a_term MUL a_fact','a_term',3,'p_a_term','parser.py',258),
  ('a_term -> a_fact','a_term',1,'p_a_term','parser.py',259),
  ('a_fact -> varref','a_fact',1,'p_a_fact','parser.py',269),
  ('a_fact -> INTEGER','a_fact',1,'p_a_fact','parser.py',270),
  ('a_fact -> FLOAT','a_fact',1,'p_a_fact','parser.py',271),
  ('a_fact -> LPAR a_expr RPAR','a_fact',3,'p_a_fact','parser.py',272),
  ('a_fact -> SUB a_expr','a_fact',2,'p_a_fact','parser.py',273),
  ('a_fact -> LITERAL_STR','a_fact',1,'p_a_fact','parser.py',274),
  ('varref -> ID','varref',1,'p_varref','parser.py',283),
  ('varref -> ID arr_idx','varref',2,'p_varref','parser.py',284),
  ('arr_idx -> LBRACK a_expr RBRACK','arr_idx',3,'p_arr_idx','parser.py',291),
  ('read -> READ varlist','read',2,'p_read','parser.py',295),
  ('write -> WRITE expr_list','write',2,'p_write','parser.py',298),
  ('varlist -> varlist COMMA varref','varlist',3,'p_varlist','parser.py',301),
  ('varlist -> varref','varlist',1,'p_varlist','parser.py',302),
  ('expr_list -> expr_list COMMA a_expr','expr_list',3,'p_expr_list','parser.py',305),
  ('expr_list -> a_expr','expr_list',1,'p_expr_list','parser.py',306),
]
